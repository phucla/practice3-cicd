version: 2.1

commands:
  destroy-stack:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_dependencies:
    description: install dependencies and setup aws cli
    steps:
      - run:
          name: install dependencies
          command: |
            sudo apt upgrade
            sudo apt update
            sudo apt install awscli -y
      - run:
          name: config awscli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION

  setup_aws:
    description: setup aws
    steps:
      - aws/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      force_revert:
        type: boolean
        default: false
    steps:
      - run:
          name: Revert migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations:revert
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
              --region us-east-1

      #Rollback
      - destroy-stack:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      #Rollback
      - destroy-stack:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - save_cache:
          paths:
            - .circleci/ansible/inventory.txt
          key: inventory-{{ .Revision  }}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:4a:52:1f:f0:5d:d9:83:ae:cc:82:5b:52:e8:ac:d3"]
      - restore_cache:
          key: inventory-{{ .Revision  }}
      - install_ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy-stack:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-stack:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  configure_node_exporter:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cd:4a:52:1f:f0:5d:d9:83:ae:cc:82:5b:52:e8:ac:d3"
      - restore_cache:
          key: inventory-{{ .Revision  }}
      - install_ansible
      - run:
          name: install exporter
          command: ansible-playbook .circleci/ansible/install-node-exporter.yml -i .circleci/ansible/inventory.txt
  #Deploy Phase
  run-migrations:
    docker:
      - image: circleci/node:14.18.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
            if grep -E -i "(has been executed successfully.|No migrations are pending)" ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/Aifwg6HzvH3GKSWFeLvALe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                echo "SUCCESS and send to 1"
            else 
                curl https://kvdb.io/Aifwg6HzvH3GKSWFeLvALe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
                echo "SUCCESS and send to 0"
            fi
      - revert-migrations

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - install_dependencies
      - restore_cache:
          name: restore cache
          keys:
            - inventory-{{ .Revision  }}
            - frontend-build
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-stack:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:4a:52:1f:f0:5d:d9:83:ae:cc:82:5b:52:e8:ac:d3"]
      - restore_cache:
          keys:
            - inventory-{{ .Revision  }}
            - backend-build
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf .circleci/ansible/roles/deploy/artifact/artifact.tar.gz .
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-stack:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_dependencies
      - restore_cache:
          keys:
            - inventory-{{ .Revision  }}
            - frontend-build
            - backend-build
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(cat .circleci/ansible/inventory.txt | tail -n 1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:
          name: Backend smoke test.
          command: chmod +x .circleci/scripts/smokeTest-BE.sh && .circleci/scripts/smokeTest-BE.sh
      - run:
          name: Frontend smoke test
          command: chmod +x .circleci/scripts/smokeTest-FE.sh && .circleci/scripts/smokeTest-FE.sh $CIRCLE_WORKFLOW_ID
      - revert-migrations
      - destroy-stack:
          stack_name: udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-stack:
          stack_name: udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - setup_aws
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - configure_node_exporter:
          requires: [configure-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
